
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'NUMBER ID WHITESPACE ENTER EQ COL PLUS MINUS TIMES DIVIDE LPAREN RPAREN LBRACE RBRACE ARROW COMMA TRIPLEDOT FOR TYPE IN VAR FUNC TYPE TYPEstart : statements\n\t\t\t| emptyempty :statements : statement ENTER next_statementnext_statement : statement ENTER next_statement\n\t\t\t\t\t| emptystatement : assignment_statement\n\t\t\t\t| declaration_statement\n\t\t\t\t| function_defination\n\t\t\t\t| for_loop\n\t\t\t\t| function_callassignment_statement : ID WHITESPACE EQ WHITESPACE expressiondeclaration_statement : VAR WHITESPACE ID COL WHITESPACE TYPE\n\t\t\t\t\t\t\t| VAR WHITESPACE ID COL WHITESPACE TYPE WHITESPACE EQ WHITESPACE expression\n\t\t\t\t\t\t\t| VAR WHITESPACE ID WHITESPACE EQ WHITESPACE expression expression : expression PLUS term\n\t\t\t\t| expression MINUS term\n\t\t\t\t| term\n\t\t\t\tterm : term TIMES factor\n\t\t\t| term DIVIDE factor\n\t\t\t| factor\n\tfactor : ID\n\t\t\t| NUMBER\n\tfunction_defination : FUNC WHITESPACE ID LPAREN optional_parameters RPAREN WHITESPACE optional_return_type WHITESPACE LBRACE ENTER statements RBRACEoptional_parameters : has_parameter\n\t\t\t\t\t\t| emptyhas_parameter : has_parameter COMMA has_parameter\n\t\t\t\t\t\t| ID COL WHITESPACE TYPEoptional_return_type : ARROW WHITESPACE TYPEfor_loop : FOR WHITESPACE ID WHITESPACE IN WHITESPACE NUMBER TRIPLEDOT NUMBER WHITESPACE LBRACE ENTER statements RBRACEoptional_ids : empty\n\t\t| has_idhas_id : ID COMMA has_id\n\t\t| ID  function_call : ID LPAREN optional_ids RPAREN'
    
_lr_action_items = {'FUNC':([0,17,35,86,89,],[2,2,2,2,2,]),'$end':([0,6,8,12,17,23,24,35,46,],[-3,0,-2,-1,-3,-4,-6,-3,-5,]),'TYPE':([45,64,78,],[58,73,82,]),'RPAREN':([18,26,27,28,29,31,39,41,42,47,63,73,],[-3,-34,37,-32,-31,-3,-25,55,-26,-33,-27,-28,]),'ARROW':([65,],[74,]),'ID':([0,14,15,16,17,18,31,35,36,38,53,57,59,60,61,62,81,86,89,],[11,20,21,22,11,26,40,11,26,49,40,49,49,49,49,49,49,11,11,]),'ENTER':([1,3,4,5,10,13,25,37,48,49,50,51,52,58,67,69,70,71,72,83,85,87,90,92,],[-9,-11,-7,-8,17,-10,35,-35,-18,-22,-23,-21,-12,-13,-15,-19,-20,-16,-17,86,-14,89,-24,-30,]),'DIVIDE':([48,49,50,51,69,70,71,72,],[60,-22,-23,-21,-19,-20,60,60,]),'LPAREN':([11,20,],[18,31,]),'RBRACE':([17,23,24,35,46,88,91,],[-3,-4,-6,-3,-5,90,92,]),'FOR':([0,17,35,86,89,],[7,7,7,7,7,]),'NUMBER':([38,56,57,59,60,61,62,76,81,],[50,66,50,50,50,50,50,80,50,]),'VAR':([0,17,35,86,89,],[9,9,9,9,9,]),'EQ':([19,33,68,],[30,44,77,]),'WHITESPACE':([2,7,9,11,21,22,30,34,43,44,54,55,58,74,75,77,80,82,],[14,15,16,19,32,33,38,45,56,57,64,65,68,78,79,81,84,-29,]),'COL':([22,40,],[34,54,]),'PLUS':([48,49,50,51,52,67,69,70,71,72,85,],[-18,-22,-23,-21,61,61,-19,-20,-16,-17,61,]),'LBRACE':([79,84,],[83,87,]),'TIMES':([48,49,50,51,69,70,71,72,],[59,-22,-23,-21,-19,-20,59,59,]),'IN':([32,],[43,]),'COMMA':([26,39,63,73,],[36,53,53,-28,]),'MINUS':([48,49,50,51,52,67,69,70,71,72,85,],[-18,-22,-23,-21,62,62,-19,-20,-16,-17,62,]),'TRIPLEDOT':([66,],[76,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'next_statement':([17,35,],[23,46,]),'function_defination':([0,17,35,86,89,],[1,1,1,1,1,]),'optional_ids':([18,],[27,]),'function_call':([0,17,35,86,89,],[3,3,3,3,3,]),'has_id':([18,36,],[28,47,]),'expression':([38,57,81,],[52,67,85,]),'factor':([38,57,59,60,61,62,81,],[51,51,69,70,51,51,51,]),'optional_return_type':([65,],[75,]),'assignment_statement':([0,17,35,86,89,],[4,4,4,4,4,]),'start':([0,],[6,]),'statement':([0,17,35,86,89,],[10,25,25,10,10,]),'has_parameter':([31,53,],[39,63,]),'statements':([0,86,89,],[12,88,91,]),'declaration_statement':([0,17,35,86,89,],[5,5,5,5,5,]),'term':([38,57,61,62,81,],[48,48,71,72,48,]),'optional_parameters':([31,],[41,]),'empty':([0,17,18,31,35,],[8,24,29,42,24,]),'for_loop':([0,17,35,86,89,],[13,13,13,13,13,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> start","S'",1,None,None,None),
  ('start -> statements','start',1,'p_start','swift_parser.py',21),
  ('start -> empty','start',1,'p_start','swift_parser.py',22),
  ('empty -> <empty>','empty',0,'p_empty','swift_parser.py',26),
  ('statements -> statement ENTER next_statement','statements',3,'p_statements','swift_parser.py',30),
  ('next_statement -> statement ENTER next_statement','next_statement',3,'p_next_statement','swift_parser.py',34),
  ('next_statement -> empty','next_statement',1,'p_next_statement','swift_parser.py',35),
  ('statement -> assignment_statement','statement',1,'p_statement','swift_parser.py',43),
  ('statement -> declaration_statement','statement',1,'p_statement','swift_parser.py',44),
  ('statement -> function_defination','statement',1,'p_statement','swift_parser.py',45),
  ('statement -> for_loop','statement',1,'p_statement','swift_parser.py',46),
  ('statement -> function_call','statement',1,'p_statement','swift_parser.py',47),
  ('assignment_statement -> ID WHITESPACE EQ WHITESPACE expression','assignment_statement',5,'p_assignment_statement','swift_parser.py',51),
  ('declaration_statement -> VAR WHITESPACE ID COL WHITESPACE TYPE','declaration_statement',6,'p_declaration_statement','swift_parser.py',62),
  ('declaration_statement -> VAR WHITESPACE ID COL WHITESPACE TYPE WHITESPACE EQ WHITESPACE expression','declaration_statement',10,'p_declaration_statement','swift_parser.py',63),
  ('declaration_statement -> VAR WHITESPACE ID WHITESPACE EQ WHITESPACE expression','declaration_statement',7,'p_declaration_statement','swift_parser.py',64),
  ('expression -> expression PLUS term','expression',3,'p_expression','swift_parser.py',90),
  ('expression -> expression MINUS term','expression',3,'p_expression','swift_parser.py',91),
  ('expression -> term','expression',1,'p_expression','swift_parser.py',92),
  ('term -> term TIMES factor','term',3,'p_term','swift_parser.py',104),
  ('term -> term DIVIDE factor','term',3,'p_term','swift_parser.py',105),
  ('term -> factor','term',1,'p_term','swift_parser.py',106),
  ('factor -> ID','factor',1,'p_factor','swift_parser.py',118),
  ('factor -> NUMBER','factor',1,'p_factor','swift_parser.py',119),
  ('function_defination -> FUNC WHITESPACE ID LPAREN optional_parameters RPAREN WHITESPACE optional_return_type WHITESPACE LBRACE ENTER statements RBRACE','function_defination',13,'p_function_defination','swift_parser.py',124),
  ('optional_parameters -> has_parameter','optional_parameters',1,'p_optional_parameters','swift_parser.py',131),
  ('optional_parameters -> empty','optional_parameters',1,'p_optional_parameters','swift_parser.py',132),
  ('has_parameter -> has_parameter COMMA has_parameter','has_parameter',3,'p_has_parameter','swift_parser.py',135),
  ('has_parameter -> ID COL WHITESPACE TYPE','has_parameter',4,'p_has_parameter','swift_parser.py',136),
  ('optional_return_type -> ARROW WHITESPACE TYPE','optional_return_type',3,'p_optional_return_type','swift_parser.py',139),
  ('for_loop -> FOR WHITESPACE ID WHITESPACE IN WHITESPACE NUMBER TRIPLEDOT NUMBER WHITESPACE LBRACE ENTER statements RBRACE','for_loop',14,'p_for_loop','swift_parser.py',142),
  ('optional_ids -> empty','optional_ids',1,'p_optional_ids','swift_parser.py',149),
  ('optional_ids -> has_id','optional_ids',1,'p_optional_ids','swift_parser.py',150),
  ('has_id -> ID COMMA has_id','has_id',3,'p_has_id','swift_parser.py',154),
  ('has_id -> ID','has_id',1,'p_has_id','swift_parser.py',155),
  ('function_call -> ID LPAREN optional_ids RPAREN','function_call',4,'p_function_call','swift_parser.py',163),
]
