
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'NUMBER ID WHITESPACE ENTER EQ COL PLUS MINUS TIMES DIVIDE LPAREN RPAREN LBRACE RBRACE ARROW COMMA TRIPLEDOT TYPE FUNC VAR IN TYPE FOR TYPEstart : statements\n\t\t\t| emptyempty :statements : statement ENTER next_statementnext_statement : statement ENTER next_statement\n\t\t\t\t\t| emptystatement : assignment_statement\n\t\t\t\t| declaration_statement\n\t\t\t\t| function_defination\n\t\t\t\t| for_loopassignment_statement : ID WHITESPACE EQ WHITESPACE expressiondeclaration_statement : VAR WHITESPACE ID COL WHITESPACE TYPE\n\t\t\t\t\t\t\t| VAR WHITESPACE ID COL WHITESPACE TYPE WHITESPACE EQ WHITESPACE expression\n\t\t\t\t\t\t\t| VAR WHITESPACE ID WHITESPACE EQ WHITESPACE expression expression : expression PLUS term\n\t\t\t\t| expression MINUS term\n\t\t\t\t| term\n\t\t\t\tterm : term TIMES factor\n\t\t\t| term DIVIDE factor\n\t\t\t| factor\n\tfactor : ID\n\t\t\t| NUMBER\n\tfunction_defination : FUNC WHITESPACE ID LPAREN optional_parameters RPAREN WHITESPACE optional_return_type WHITESPACE LBRACE ENTER statements RBRACEoptional_parameters : has_parameter\n\t\t\t\t\t\t| emptyhas_parameter : has_parameter COMMA has_parameter\n\t\t\t\t\t\t| ID COL WHITESPACE TYPEoptional_return_type : ARROW WHITESPACE TYPEfor_loop : FOR WHITESPACE ID WHITESPACE IN WHITESPACE NUMBER TRIPLEDOT NUMBER WHITESPACE LBRACE ENTER statements RBRACE'
    
_lr_action_items = {'LBRACE':([70,76,],[74,78,]),'ENTER':([1,3,6,8,12,24,35,36,37,38,39,52,57,58,59,60,61,74,75,78,81,83,],[-7,-9,-8,-10,17,30,-11,-20,-22,-17,-21,-12,-15,-16,-19,-18,-14,77,-13,80,-23,-29,]),'WHITESPACE':([2,5,7,9,19,20,21,28,40,42,44,46,52,65,66,67,72,73,],[13,14,15,16,26,27,29,41,51,53,54,56,62,69,70,71,76,-28,]),'FUNC':([0,17,30,77,80,],[2,2,2,2,2,]),'MINUS':([35,36,37,38,39,57,58,59,60,61,75,],[48,-20,-22,-17,-21,-15,-16,-19,-18,48,48,]),'RPAREN':([25,32,33,34,55,64,],[-3,-24,-25,46,-26,-27,]),'DIVIDE':([36,37,38,39,57,58,59,60,],[-20,-22,49,-21,49,49,-19,-18,]),'ID':([0,13,15,16,17,25,26,30,45,47,48,49,50,51,71,77,80,],[5,18,20,21,5,31,39,5,31,39,39,39,39,39,39,5,5,]),'RBRACE':([17,22,23,30,43,79,82,],[-3,-4,-6,-3,-5,81,83,]),'EQ':([14,27,62,],[19,40,67,]),'PLUS':([35,36,37,38,39,57,58,59,60,61,75,],[47,-20,-22,-17,-21,-15,-16,-19,-18,47,47,]),'IN':([29,],[42,]),'COL':([20,31,],[28,44,]),'$end':([0,4,10,11,17,22,23,30,43,],[-3,0,-1,-2,-3,-4,-6,-3,-5,]),'VAR':([0,17,30,77,80,],[7,7,7,7,7,]),'NUMBER':([26,47,48,49,50,51,53,68,71,],[37,37,37,37,37,37,63,72,37,]),'TIMES':([36,37,38,39,57,58,59,60,],[-20,-22,50,-21,50,50,-19,-18,]),'TRIPLEDOT':([63,],[68,]),'FOR':([0,17,30,77,80,],[9,9,9,9,9,]),'ARROW':([56,],[65,]),'LPAREN':([18,],[25,]),'TYPE':([41,54,69,],[52,64,73,]),'COMMA':([32,55,64,],[45,45,-27,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'expression':([26,51,71,],[35,61,75,]),'has_parameter':([25,45,],[32,55,]),'assignment_statement':([0,17,30,77,80,],[1,1,1,1,1,]),'for_loop':([0,17,30,77,80,],[8,8,8,8,8,]),'function_defination':([0,17,30,77,80,],[3,3,3,3,3,]),'start':([0,],[4,]),'factor':([26,47,48,49,50,51,71,],[36,36,36,59,60,36,36,]),'optional_return_type':([56,],[66,]),'next_statement':([17,30,],[22,43,]),'declaration_statement':([0,17,30,77,80,],[6,6,6,6,6,]),'statements':([0,77,80,],[10,79,82,]),'empty':([0,17,25,30,],[11,23,33,23,]),'optional_parameters':([25,],[34,]),'term':([26,47,48,51,71,],[38,57,58,38,38,]),'statement':([0,17,30,77,80,],[12,24,24,12,12,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> start","S'",1,None,None,None),
  ('start -> statements','start',1,'p_start','swift_parser.py',20),
  ('start -> empty','start',1,'p_start','swift_parser.py',21),
  ('empty -> <empty>','empty',0,'p_empty','swift_parser.py',25),
  ('statements -> statement ENTER next_statement','statements',3,'p_statements','swift_parser.py',29),
  ('next_statement -> statement ENTER next_statement','next_statement',3,'p_next_statement','swift_parser.py',33),
  ('next_statement -> empty','next_statement',1,'p_next_statement','swift_parser.py',34),
  ('statement -> assignment_statement','statement',1,'p_statement','swift_parser.py',42),
  ('statement -> declaration_statement','statement',1,'p_statement','swift_parser.py',43),
  ('statement -> function_defination','statement',1,'p_statement','swift_parser.py',44),
  ('statement -> for_loop','statement',1,'p_statement','swift_parser.py',45),
  ('assignment_statement -> ID WHITESPACE EQ WHITESPACE expression','assignment_statement',5,'p_assignment_statement','swift_parser.py',49),
  ('declaration_statement -> VAR WHITESPACE ID COL WHITESPACE TYPE','declaration_statement',6,'p_declaration_statement','swift_parser.py',60),
  ('declaration_statement -> VAR WHITESPACE ID COL WHITESPACE TYPE WHITESPACE EQ WHITESPACE expression','declaration_statement',10,'p_declaration_statement','swift_parser.py',61),
  ('declaration_statement -> VAR WHITESPACE ID WHITESPACE EQ WHITESPACE expression','declaration_statement',7,'p_declaration_statement','swift_parser.py',62),
  ('expression -> expression PLUS term','expression',3,'p_expression','swift_parser.py',88),
  ('expression -> expression MINUS term','expression',3,'p_expression','swift_parser.py',89),
  ('expression -> term','expression',1,'p_expression','swift_parser.py',90),
  ('term -> term TIMES factor','term',3,'p_term','swift_parser.py',102),
  ('term -> term DIVIDE factor','term',3,'p_term','swift_parser.py',103),
  ('term -> factor','term',1,'p_term','swift_parser.py',104),
  ('factor -> ID','factor',1,'p_factor','swift_parser.py',116),
  ('factor -> NUMBER','factor',1,'p_factor','swift_parser.py',117),
  ('function_defination -> FUNC WHITESPACE ID LPAREN optional_parameters RPAREN WHITESPACE optional_return_type WHITESPACE LBRACE ENTER statements RBRACE','function_defination',13,'p_function_defination','swift_parser.py',122),
  ('optional_parameters -> has_parameter','optional_parameters',1,'p_optional_parameters','swift_parser.py',129),
  ('optional_parameters -> empty','optional_parameters',1,'p_optional_parameters','swift_parser.py',130),
  ('has_parameter -> has_parameter COMMA has_parameter','has_parameter',3,'p_has_parameter','swift_parser.py',133),
  ('has_parameter -> ID COL WHITESPACE TYPE','has_parameter',4,'p_has_parameter','swift_parser.py',134),
  ('optional_return_type -> ARROW WHITESPACE TYPE','optional_return_type',3,'p_optional_return_type','swift_parser.py',137),
  ('for_loop -> FOR WHITESPACE ID WHITESPACE IN WHITESPACE NUMBER TRIPLEDOT NUMBER WHITESPACE LBRACE ENTER statements RBRACE','for_loop',14,'p_for_loop','swift_parser.py',140),
]
