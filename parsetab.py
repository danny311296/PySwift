
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'NUMBER ID WHITESPACE ENTER EQ COL PLUS MINUS TIMES DIVIDE LPAREN RPAREN LBRACE RBRACE ARROW COMMA TRIPLEDOT IN VAR FOR TYPE TYPE FUNC TYPEstart : statements\n\t\t\t| emptyempty :statements : statement ENTER next_statementnext_statement : statement ENTER next_statement\n\t\t\t\t\t| emptystatement : assignment_statement\n\t\t\t\t| declaration_statement\n\t\t\t\t| function_defination\n\t\t\t\t| for_loopassignment_statement : ID WHITESPACE EQ WHITESPACE expressiondeclaration_statement : VAR WHITESPACE ID COL WHITESPACE TYPE\n\t\t\t\t\t\t\t| VAR WHITESPACE ID COL WHITESPACE TYPE WHITESPACE EQ WHITESPACE expression\n\t\t\t\t\t\t\t| VAR WHITESPACE ID WHITESPACE EQ WHITESPACE expression expression : expression PLUS term\n\t\t\t\t| expression MINUS term\n\t\t\t\t| term\n\t\t\t\tterm : term TIMES factor\n\t\t\t| term DIVIDE factor\n\t\t\t| factor\n\tfactor : ID\n\t\t\t| NUMBER\n\tfunction_defination : FUNC WHITESPACE ID LPAREN optional_parameters RPAREN WHITESPACE optional_return_type WHITESPACE LBRACE ENTER statements RBRACEoptional_parameters : has_parameter\n\t\t\t\t\t\t| emptyhas_parameter : has_parameter COMMA has_parameter\n\t\t\t\t\t\t| ID COL WHITESPACE TYPEoptional_return_type : ARROW WHITESPACE TYPEfor_loop : FOR WHITESPACE ID WHITESPACE IN WHITESPACE NUMBER TRIPLEDOT NUMBER WHITESPACE LBRACE ENTER statements RBRACE'
    
_lr_action_items = {'$end':([0,1,3,9,17,22,23,30,43,],[-3,-2,-1,0,-3,-6,-4,-3,-5,]),'VAR':([0,17,30,77,80,],[4,4,4,4,4,]),'TIMES':([37,39,40,41,59,60,61,62,],[-22,-21,51,-20,51,51,-18,-19,]),'MINUS':([37,38,39,40,41,55,59,60,61,62,73,],[-22,50,-21,-17,-20,50,-15,-16,-18,-19,50,]),'ARROW':([57,],[66,]),'FUNC':([0,17,30,77,80,],[5,5,5,5,5,]),'IN':([29,],[42,]),'LBRACE':([70,76,],[74,78,]),'RBRACE':([17,22,23,30,43,79,82,],[-3,-6,-4,-3,-5,81,83,]),'LPAREN':([19,],[27,]),'ID':([0,13,14,16,17,27,28,30,45,46,49,50,51,52,69,77,80,],[6,18,19,21,6,36,39,6,39,36,39,39,39,39,39,6,6,]),'TYPE':([31,58,71,],[44,67,75,]),'DIVIDE':([37,39,40,41,59,60,61,62,],[-22,-21,52,-20,52,52,-18,-19,]),'ENTER':([2,7,8,10,12,24,37,38,39,40,41,44,55,59,60,61,62,73,74,78,81,83,],[-7,-8,-10,-9,17,30,-22,-11,-21,-17,-20,-12,-14,-15,-16,-18,-19,-13,77,80,-23,-29,]),'NUMBER':([28,45,49,50,51,52,53,68,69,],[37,37,37,37,37,37,63,72,37,]),'EQ':([15,26,54,],[20,32,64,]),'PLUS':([37,38,39,40,41,55,59,60,61,62,73,],[-22,49,-21,-17,-20,49,-15,-16,-18,-19,49,]),'TRIPLEDOT':([63,],[68,]),'RPAREN':([27,33,34,35,56,67,],[-3,-25,-24,47,-26,-27,]),'COL':([18,36,],[25,48,]),'COMMA':([34,56,67,],[46,46,-27,]),'FOR':([0,17,30,77,80,],[11,11,11,11,11,]),'WHITESPACE':([4,5,6,11,18,20,21,25,32,42,44,47,48,64,65,66,72,75,],[13,14,15,16,26,28,29,31,45,53,54,57,58,69,70,71,76,-28,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'empty':([0,17,27,30,],[1,22,33,22,]),'declaration_statement':([0,17,30,77,80,],[7,7,7,7,7,]),'for_loop':([0,17,30,77,80,],[8,8,8,8,8,]),'start':([0,],[9,]),'statements':([0,77,80,],[3,79,82,]),'term':([28,45,49,50,69,],[40,40,59,60,40,]),'expression':([28,45,69,],[38,55,73,]),'function_defination':([0,17,30,77,80,],[10,10,10,10,10,]),'has_parameter':([27,46,],[34,56,]),'assignment_statement':([0,17,30,77,80,],[2,2,2,2,2,]),'optional_parameters':([27,],[35,]),'statement':([0,17,30,77,80,],[12,24,24,12,12,]),'optional_return_type':([57,],[65,]),'next_statement':([17,30,],[23,43,]),'factor':([28,45,49,50,51,52,69,],[41,41,41,41,61,62,41,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> start","S'",1,None,None,None),
  ('start -> statements','start',1,'p_start','swift_parser.py',20),
  ('start -> empty','start',1,'p_start','swift_parser.py',21),
  ('empty -> <empty>','empty',0,'p_empty','swift_parser.py',25),
  ('statements -> statement ENTER next_statement','statements',3,'p_statements','swift_parser.py',29),
  ('next_statement -> statement ENTER next_statement','next_statement',3,'p_next_statement','swift_parser.py',33),
  ('next_statement -> empty','next_statement',1,'p_next_statement','swift_parser.py',34),
  ('statement -> assignment_statement','statement',1,'p_statement','swift_parser.py',42),
  ('statement -> declaration_statement','statement',1,'p_statement','swift_parser.py',43),
  ('statement -> function_defination','statement',1,'p_statement','swift_parser.py',44),
  ('statement -> for_loop','statement',1,'p_statement','swift_parser.py',45),
  ('assignment_statement -> ID WHITESPACE EQ WHITESPACE expression','assignment_statement',5,'p_assignment_statement','swift_parser.py',49),
  ('declaration_statement -> VAR WHITESPACE ID COL WHITESPACE TYPE','declaration_statement',6,'p_declaration_statement','swift_parser.py',60),
  ('declaration_statement -> VAR WHITESPACE ID COL WHITESPACE TYPE WHITESPACE EQ WHITESPACE expression','declaration_statement',10,'p_declaration_statement','swift_parser.py',61),
  ('declaration_statement -> VAR WHITESPACE ID WHITESPACE EQ WHITESPACE expression','declaration_statement',7,'p_declaration_statement','swift_parser.py',62),
  ('expression -> expression PLUS term','expression',3,'p_expression','swift_parser.py',88),
  ('expression -> expression MINUS term','expression',3,'p_expression','swift_parser.py',89),
  ('expression -> term','expression',1,'p_expression','swift_parser.py',90),
  ('term -> term TIMES factor','term',3,'p_term','swift_parser.py',102),
  ('term -> term DIVIDE factor','term',3,'p_term','swift_parser.py',103),
  ('term -> factor','term',1,'p_term','swift_parser.py',104),
  ('factor -> ID','factor',1,'p_factor','swift_parser.py',116),
  ('factor -> NUMBER','factor',1,'p_factor','swift_parser.py',117),
  ('function_defination -> FUNC WHITESPACE ID LPAREN optional_parameters RPAREN WHITESPACE optional_return_type WHITESPACE LBRACE ENTER statements RBRACE','function_defination',13,'p_function_defination','swift_parser.py',122),
  ('optional_parameters -> has_parameter','optional_parameters',1,'p_optional_parameters','swift_parser.py',129),
  ('optional_parameters -> empty','optional_parameters',1,'p_optional_parameters','swift_parser.py',130),
  ('has_parameter -> has_parameter COMMA has_parameter','has_parameter',3,'p_has_parameter','swift_parser.py',133),
  ('has_parameter -> ID COL WHITESPACE TYPE','has_parameter',4,'p_has_parameter','swift_parser.py',134),
  ('optional_return_type -> ARROW WHITESPACE TYPE','optional_return_type',3,'p_optional_return_type','swift_parser.py',137),
  ('for_loop -> FOR WHITESPACE ID WHITESPACE IN WHITESPACE NUMBER TRIPLEDOT NUMBER WHITESPACE LBRACE ENTER statements RBRACE','for_loop',14,'p_for_loop','swift_parser.py',140),
]
