
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'NUMBER ID WHITESPACE ENTER EQ COL PLUS MINUS TIMES DIVIDE LPAREN RPAREN LBRACE RBRACE ARROW COMMA TRIPLEDOT IN VAR FOR TYPE TYPE TYPE FUNCstart : statements\n\t\t\t| emptyempty :statements : statement ENTER next_statementnext_statement : statement ENTER next_statement\n\t\t\t\t\t| emptystatement : assignment_statement\n\t\t\t\t| declaration_statement\n\t\t\t\t| function_defination\n\t\t\t\t| for_loop\n\t\t\t\t| function_callassignment_statement : ID WHITESPACE EQ WHITESPACE expressiondeclaration_statement : VAR WHITESPACE ID COL WHITESPACE TYPE\n\t\t\t\t\t\t\t| VAR WHITESPACE ID COL WHITESPACE TYPE WHITESPACE EQ WHITESPACE expression\n\t\t\t\t\t\t\t| VAR WHITESPACE ID WHITESPACE EQ WHITESPACE expression expression : expression PLUS term\n\t\t\t\t| expression MINUS term\n\t\t\t\t| term\n\t\t\t\tterm : term TIMES factor\n\t\t\t| term DIVIDE factor\n\t\t\t| factor\n\tfactor : ID\n\t\t\t| NUMBER\n\tfunction_defination : FUNC WHITESPACE ID LPAREN optional_parameters RPAREN WHITESPACE optional_return_type WHITESPACE LBRACE ENTER statements RBRACEoptional_parameters : has_parameter\n\t\t\t\t\t\t| emptyhas_parameter : has_parameter COMMA has_parameter\n\t\t\t\t\t\t| ID COL WHITESPACE TYPEoptional_return_type : ARROW WHITESPACE TYPEfor_loop : FOR WHITESPACE ID WHITESPACE IN WHITESPACE NUMBER TRIPLEDOT NUMBER WHITESPACE LBRACE ENTER statements RBRACEoptional_ids : empty\n\t\t| has_idhas_id : ID COMMA has_id\n\t\t| ID  function_call : ID LPAREN optional_ids RPAREN'
    
_lr_action_items = {'COMMA':([24,41,65,75,],[33,55,55,-28,]),'RBRACE':([18,27,28,36,50,88,91,],[-3,-4,-6,-3,-5,90,92,]),'TYPE':([52,64,79,],[62,75,83,]),'RPAREN':([15,21,22,23,24,31,39,41,42,43,65,75,],[-3,-32,32,-31,-34,-3,53,-25,-26,-33,-27,-28,]),'COL':([30,40,],[38,54,]),'FUNC':([0,18,36,86,89,],[2,2,2,2,2,]),'ID':([0,14,15,17,18,19,31,33,34,36,55,56,57,58,59,61,81,86,89,],[3,20,24,26,3,30,40,24,45,3,40,45,45,45,45,45,45,3,3,]),'FOR':([0,18,36,86,89,],[10,10,10,10,10,]),'IN':([35,],[49,]),'ENTER':([1,4,5,7,9,11,29,32,44,45,46,47,48,62,66,67,68,69,71,82,85,87,90,92,],[-9,-11,-10,-8,-7,18,36,-35,-18,-22,-12,-23,-21,-13,-19,-20,-17,-16,-15,86,-14,89,-24,-30,]),'NUMBER':([34,56,57,58,59,60,61,76,81,],[47,47,47,47,47,70,47,80,47,]),'DIVIDE':([44,45,47,48,66,67,68,69,],[57,-22,-23,-21,-19,-20,57,57,]),'TIMES':([44,45,47,48,66,67,68,69,],[56,-22,-23,-21,-19,-20,56,56,]),'MINUS':([44,45,46,47,48,66,67,68,69,71,85,],[-18,-22,58,-23,-21,-19,-20,-17,-16,58,58,]),'EQ':([16,37,72,],[25,51,77,]),'LPAREN':([3,20,],[15,31,]),'PLUS':([44,45,46,47,48,66,67,68,69,71,85,],[-18,-22,59,-23,-21,-19,-20,-17,-16,59,59,]),'$end':([0,6,8,12,18,27,28,36,50,],[-3,0,-1,-2,-3,-4,-6,-3,-5,]),'TRIPLEDOT':([70,],[76,]),'ARROW':([63,],[74,]),'WHITESPACE':([2,3,10,13,25,26,30,38,49,51,53,54,62,73,74,77,80,83,],[14,16,17,19,34,35,37,52,60,61,63,64,72,78,79,81,84,-29,]),'LBRACE':([78,84,],[82,87,]),'VAR':([0,18,36,86,89,],[13,13,13,13,13,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'optional_parameters':([31,],[39,]),'optional_return_type':([63,],[73,]),'optional_ids':([15,],[22,]),'statements':([0,86,89,],[8,88,91,]),'term':([34,58,59,61,81,],[44,68,69,44,44,]),'for_loop':([0,18,36,86,89,],[5,5,5,5,5,]),'function_call':([0,18,36,86,89,],[4,4,4,4,4,]),'next_statement':([18,36,],[27,50,]),'has_id':([15,33,],[21,43,]),'empty':([0,15,18,31,36,],[12,23,28,42,28,]),'function_defination':([0,18,36,86,89,],[1,1,1,1,1,]),'factor':([34,56,57,58,59,61,81,],[48,66,67,48,48,48,48,]),'has_parameter':([31,55,],[41,65,]),'declaration_statement':([0,18,36,86,89,],[7,7,7,7,7,]),'expression':([34,61,81,],[46,71,85,]),'assignment_statement':([0,18,36,86,89,],[9,9,9,9,9,]),'statement':([0,18,36,86,89,],[11,29,29,11,11,]),'start':([0,],[6,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> start","S'",1,None,None,None),
  ('start -> statements','start',1,'p_start','swift_parser.py',21),
  ('start -> empty','start',1,'p_start','swift_parser.py',22),
  ('empty -> <empty>','empty',0,'p_empty','swift_parser.py',26),
  ('statements -> statement ENTER next_statement','statements',3,'p_statements','swift_parser.py',30),
  ('next_statement -> statement ENTER next_statement','next_statement',3,'p_next_statement','swift_parser.py',34),
  ('next_statement -> empty','next_statement',1,'p_next_statement','swift_parser.py',35),
  ('statement -> assignment_statement','statement',1,'p_statement','swift_parser.py',43),
  ('statement -> declaration_statement','statement',1,'p_statement','swift_parser.py',44),
  ('statement -> function_defination','statement',1,'p_statement','swift_parser.py',45),
  ('statement -> for_loop','statement',1,'p_statement','swift_parser.py',46),
  ('statement -> function_call','statement',1,'p_statement','swift_parser.py',47),
  ('assignment_statement -> ID WHITESPACE EQ WHITESPACE expression','assignment_statement',5,'p_assignment_statement','swift_parser.py',51),
  ('declaration_statement -> VAR WHITESPACE ID COL WHITESPACE TYPE','declaration_statement',6,'p_declaration_statement','swift_parser.py',62),
  ('declaration_statement -> VAR WHITESPACE ID COL WHITESPACE TYPE WHITESPACE EQ WHITESPACE expression','declaration_statement',10,'p_declaration_statement','swift_parser.py',63),
  ('declaration_statement -> VAR WHITESPACE ID WHITESPACE EQ WHITESPACE expression','declaration_statement',7,'p_declaration_statement','swift_parser.py',64),
  ('expression -> expression PLUS term','expression',3,'p_expression','swift_parser.py',90),
  ('expression -> expression MINUS term','expression',3,'p_expression','swift_parser.py',91),
  ('expression -> term','expression',1,'p_expression','swift_parser.py',92),
  ('term -> term TIMES factor','term',3,'p_term','swift_parser.py',104),
  ('term -> term DIVIDE factor','term',3,'p_term','swift_parser.py',105),
  ('term -> factor','term',1,'p_term','swift_parser.py',106),
  ('factor -> ID','factor',1,'p_factor','swift_parser.py',118),
  ('factor -> NUMBER','factor',1,'p_factor','swift_parser.py',119),
  ('function_defination -> FUNC WHITESPACE ID LPAREN optional_parameters RPAREN WHITESPACE optional_return_type WHITESPACE LBRACE ENTER statements RBRACE','function_defination',13,'p_function_defination','swift_parser.py',124),
  ('optional_parameters -> has_parameter','optional_parameters',1,'p_optional_parameters','swift_parser.py',131),
  ('optional_parameters -> empty','optional_parameters',1,'p_optional_parameters','swift_parser.py',132),
  ('has_parameter -> has_parameter COMMA has_parameter','has_parameter',3,'p_has_parameter','swift_parser.py',135),
  ('has_parameter -> ID COL WHITESPACE TYPE','has_parameter',4,'p_has_parameter','swift_parser.py',136),
  ('optional_return_type -> ARROW WHITESPACE TYPE','optional_return_type',3,'p_optional_return_type','swift_parser.py',139),
  ('for_loop -> FOR WHITESPACE ID WHITESPACE IN WHITESPACE NUMBER TRIPLEDOT NUMBER WHITESPACE LBRACE ENTER statements RBRACE','for_loop',14,'p_for_loop','swift_parser.py',142),
  ('optional_ids -> empty','optional_ids',1,'p_optional_ids','swift_parser.py',149),
  ('optional_ids -> has_id','optional_ids',1,'p_optional_ids','swift_parser.py',150),
  ('has_id -> ID COMMA has_id','has_id',3,'p_has_id','swift_parser.py',154),
  ('has_id -> ID','has_id',1,'p_has_id','swift_parser.py',155),
  ('function_call -> ID LPAREN optional_ids RPAREN','function_call',4,'p_function_call','swift_parser.py',163),
]
