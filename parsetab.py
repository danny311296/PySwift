
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'NUMBER ID WHITESPACE ENTER EQ COL PLUS MINUS TIMES DIVIDE LPAREN RPAREN LBRACE RBRACE ARROW COMMA TRIPLEDOT TYPE FUNC TYPE IN TYPE VAR FORstart : statements\n\t\t\t| emptyempty :statements : statement ENTER next_statementnext_statement : statement ENTER next_statement\n\t\t\t\t\t| emptystatement : assignment_statement\n\t\t\t\t| declaration_statement\n\t\t\t\t| function_defination\n\t\t\t\t| for_loop\n\t\t\t\t| function_callassignment_statement : ID WHITESPACE EQ WHITESPACE expressiondeclaration_statement : VAR WHITESPACE ID COL WHITESPACE TYPE\n\t\t\t\t\t\t\t| VAR WHITESPACE ID COL WHITESPACE TYPE WHITESPACE EQ WHITESPACE expression\n\t\t\t\t\t\t\t| VAR WHITESPACE ID WHITESPACE EQ WHITESPACE expression expression : expression PLUS term\n\t\t\t\t| expression MINUS term\n\t\t\t\t| term\n\t\t\t\tterm : term TIMES factor\n\t\t\t| term DIVIDE factor\n\t\t\t| factor\n\tfactor : ID\n\t\t\t| NUMBER\n\tfunction_defination : FUNC WHITESPACE ID LPAREN optional_parameters RPAREN WHITESPACE optional_return_type WHITESPACE LBRACE ENTER statements RBRACEoptional_parameters : has_parameter\n\t\t\t\t\t\t| emptyhas_parameter : has_parameter COMMA has_parameter\n\t\t\t\t\t\t| ID COL WHITESPACE TYPEoptional_return_type : ARROW WHITESPACE TYPEfor_loop : FOR WHITESPACE ID WHITESPACE IN WHITESPACE NUMBER TRIPLEDOT NUMBER WHITESPACE LBRACE ENTER statements RBRACEoptional_ids : empty\n\t\t| has_idhas_id : ID COMMA has_id\n\t\t| ID  function_call : ID LPAREN optional_ids RPAREN'
    
_lr_action_items = {'FUNC':([0,17,35,86,89,],[1,1,1,1,1,]),'ID':([0,14,15,17,18,19,31,32,34,35,55,56,57,58,59,60,80,86,89,],[2,20,21,2,29,30,39,21,44,2,39,44,44,44,44,44,44,2,2,]),'COL':([29,39,],[37,53,]),'NUMBER':([34,56,57,58,59,60,62,77,80,],[48,48,48,48,48,48,72,81,48,]),'RPAREN':([15,21,22,23,24,31,40,41,42,43,65,73,],[-3,-34,-32,-31,33,-3,54,-26,-25,-33,-27,-28,]),'MINUS':([44,45,46,47,48,66,67,68,69,70,84,],[-22,56,-18,-21,-23,-17,-16,-20,-19,56,56,]),'TYPE':([51,63,79,],[61,73,83,]),'$end':([0,11,12,13,17,27,28,35,49,],[-3,-2,-1,0,-3,-6,-4,-3,-5,]),'ENTER':([3,4,5,6,7,10,26,33,44,45,46,47,48,61,66,67,68,69,70,82,84,87,90,92,],[17,-11,-10,-7,-9,-8,35,-35,-22,-12,-18,-21,-23,-13,-17,-16,-20,-19,-15,86,-14,89,-24,-30,]),'TRIPLEDOT':([72,],[77,]),'WHITESPACE':([1,2,8,9,25,29,30,37,50,52,53,54,61,74,75,76,81,83,],[14,16,18,19,34,36,38,51,60,62,63,64,71,78,79,80,85,-29,]),'EQ':([16,36,71,],[25,50,76,]),'IN':([38,],[52,]),'LPAREN':([2,20,],[15,31,]),'VAR':([0,17,35,86,89,],[8,8,8,8,8,]),'FOR':([0,17,35,86,89,],[9,9,9,9,9,]),'PLUS':([44,45,46,47,48,66,67,68,69,70,84,],[-22,57,-18,-21,-23,-17,-16,-20,-19,57,57,]),'ARROW':([64,],[75,]),'DIVIDE':([44,46,47,48,66,67,68,69,],[-22,58,-21,-23,58,58,-20,-19,]),'RBRACE':([17,27,28,35,49,88,91,],[-3,-6,-4,-3,-5,90,92,]),'COMMA':([21,42,65,73,],[32,55,55,-28,]),'LBRACE':([78,85,],[82,87,]),'TIMES':([44,46,47,48,66,67,68,69,],[-22,59,-21,-23,59,59,-20,-19,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'term':([34,56,57,60,80,],[46,66,67,46,46,]),'optional_parameters':([31,],[40,]),'has_id':([15,32,],[22,43,]),'statements':([0,86,89,],[12,88,91,]),'optional_return_type':([64,],[74,]),'for_loop':([0,17,35,86,89,],[5,5,5,5,5,]),'statement':([0,17,35,86,89,],[3,26,26,3,3,]),'factor':([34,56,57,58,59,60,80,],[47,47,47,68,69,47,47,]),'assignment_statement':([0,17,35,86,89,],[6,6,6,6,6,]),'function_call':([0,17,35,86,89,],[4,4,4,4,4,]),'expression':([34,60,80,],[45,70,84,]),'empty':([0,15,17,31,35,],[11,23,27,41,27,]),'optional_ids':([15,],[24,]),'has_parameter':([31,55,],[42,65,]),'start':([0,],[13,]),'next_statement':([17,35,],[28,49,]),'declaration_statement':([0,17,35,86,89,],[10,10,10,10,10,]),'function_defination':([0,17,35,86,89,],[7,7,7,7,7,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> start","S'",1,None,None,None),
  ('start -> statements','start',1,'p_start','swift_parser.py',21),
  ('start -> empty','start',1,'p_start','swift_parser.py',22),
  ('empty -> <empty>','empty',0,'p_empty','swift_parser.py',26),
  ('statements -> statement ENTER next_statement','statements',3,'p_statements','swift_parser.py',30),
  ('next_statement -> statement ENTER next_statement','next_statement',3,'p_next_statement','swift_parser.py',34),
  ('next_statement -> empty','next_statement',1,'p_next_statement','swift_parser.py',35),
  ('statement -> assignment_statement','statement',1,'p_statement','swift_parser.py',43),
  ('statement -> declaration_statement','statement',1,'p_statement','swift_parser.py',44),
  ('statement -> function_defination','statement',1,'p_statement','swift_parser.py',45),
  ('statement -> for_loop','statement',1,'p_statement','swift_parser.py',46),
  ('statement -> function_call','statement',1,'p_statement','swift_parser.py',47),
  ('assignment_statement -> ID WHITESPACE EQ WHITESPACE expression','assignment_statement',5,'p_assignment_statement','swift_parser.py',51),
  ('declaration_statement -> VAR WHITESPACE ID COL WHITESPACE TYPE','declaration_statement',6,'p_declaration_statement','swift_parser.py',62),
  ('declaration_statement -> VAR WHITESPACE ID COL WHITESPACE TYPE WHITESPACE EQ WHITESPACE expression','declaration_statement',10,'p_declaration_statement','swift_parser.py',63),
  ('declaration_statement -> VAR WHITESPACE ID WHITESPACE EQ WHITESPACE expression','declaration_statement',7,'p_declaration_statement','swift_parser.py',64),
  ('expression -> expression PLUS term','expression',3,'p_expression','swift_parser.py',90),
  ('expression -> expression MINUS term','expression',3,'p_expression','swift_parser.py',91),
  ('expression -> term','expression',1,'p_expression','swift_parser.py',92),
  ('term -> term TIMES factor','term',3,'p_term','swift_parser.py',104),
  ('term -> term DIVIDE factor','term',3,'p_term','swift_parser.py',105),
  ('term -> factor','term',1,'p_term','swift_parser.py',106),
  ('factor -> ID','factor',1,'p_factor','swift_parser.py',118),
  ('factor -> NUMBER','factor',1,'p_factor','swift_parser.py',119),
  ('function_defination -> FUNC WHITESPACE ID LPAREN optional_parameters RPAREN WHITESPACE optional_return_type WHITESPACE LBRACE ENTER statements RBRACE','function_defination',13,'p_function_defination','swift_parser.py',124),
  ('optional_parameters -> has_parameter','optional_parameters',1,'p_optional_parameters','swift_parser.py',131),
  ('optional_parameters -> empty','optional_parameters',1,'p_optional_parameters','swift_parser.py',132),
  ('has_parameter -> has_parameter COMMA has_parameter','has_parameter',3,'p_has_parameter','swift_parser.py',135),
  ('has_parameter -> ID COL WHITESPACE TYPE','has_parameter',4,'p_has_parameter','swift_parser.py',136),
  ('optional_return_type -> ARROW WHITESPACE TYPE','optional_return_type',3,'p_optional_return_type','swift_parser.py',139),
  ('for_loop -> FOR WHITESPACE ID WHITESPACE IN WHITESPACE NUMBER TRIPLEDOT NUMBER WHITESPACE LBRACE ENTER statements RBRACE','for_loop',14,'p_for_loop','swift_parser.py',142),
  ('optional_ids -> empty','optional_ids',1,'p_optional_ids','swift_parser.py',149),
  ('optional_ids -> has_id','optional_ids',1,'p_optional_ids','swift_parser.py',150),
  ('has_id -> ID COMMA has_id','has_id',3,'p_has_id','swift_parser.py',154),
  ('has_id -> ID','has_id',1,'p_has_id','swift_parser.py',155),
  ('function_call -> ID LPAREN optional_ids RPAREN','function_call',4,'p_function_call','swift_parser.py',163),
]
